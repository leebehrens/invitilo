#!/usr/bin/env bash

# Invitilo: A command prompt
# Run using . or source:
#   . invitilo [options] [theme]
#   source invitilo [options] [theme]

invitilo_ensure_sourced() {
    # Ensure the script is sourced.
    if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
        echo "Error: This script must be sourced. Use 'source invitilo' or '. invitilo'."
        exit 1
    fi
}

# Most readonly values (constants) are used in themes. Wrapping them all in a
# function allows using a single shellcheck disable directive for all of them.
# shellcheck disable=SC2034
invitilo_init() {
    # Exit the function if already initialized
    if [[ "${INVITILO_INIT_COMPLETE:-}" = true ]]; then
        return
    fi

    # Effects - Wrapped in \[\] to prevent bash from counting them as displayed characters.
    readonly RESET='\[\e[0m\]'
    readonly BOLD='\[\e[1m\]'
    readonly DIM='\[\e[2m\]'
    readonly NORMAL='\[\e[22m\]'
    readonly ITALIC='\[\e[3m\]'
    readonly NOITALIC='\[\e[23m\]'
    readonly UNDERLINE='\[\e[4m\]'
    readonly NOUNDERLINE='\[\e[24m\]'
    readonly BLINK='\[\e[5m\]'
    readonly NOBLINK='\[\e[25m\]'
    readonly REVERSE='\[\e[7m\]'
    readonly NOREVERSE='\[\e[27m\]'
    readonly STRIKE='\[\e[9m\]'
    readonly NOSTRIKE='\[\e[29m\]'

    # Forground colors - Wrapped in \[\] to prevent bash from counting them as displayed characters.
    readonly BLACK='\[\e[30m\]'
    readonly RED='\[\e[31m\]'
    readonly GREEN='\[\e[32m\]'
    readonly YELLOW='\[\e[33m\]'
    readonly BLUE='\[\e[34m\]'
    readonly MAGENTA='\[\e[35m\]'
    readonly CYAN='\[\e[36m\]'
    readonly WHITE='\[\e[37m\]'

    # Background colors - Wrapped in \[\] to prevent bash from counting them as displayed characters.
    readonly BLACKBG='\[\e[40m\]'
    readonly REDBG='\[\e[41m\]'
    readonly GREENBG='\[\e[42m\]'
    readonly YELLOWBG='\[\e[43m\]'
    readonly BLUEBG='\[\e[44m\]'
    readonly MAGENTABG='\[\e[45m\]'
    readonly CYANBG='\[\e[46m\]'
    readonly WHITEBG='\[\e[47m\]'

    # Some themes may find the OS type handy. E.g., there are definite display differences
    # between Linux standalone vs Linux on WSL.
    case "$OSTYPE" in
        linux*)
            INVITILO_OS="linux"
            if env | grep -q "WSL"; then
                # Running in WSL
                INVITILO_OS="linux-wsl"
            fi
            ;;
        darwin*)  INVITILO_OS="macos";;
        cygwin*)  INVITILO_OS="windows-cygwin";;
        msys*)    INVITILO_OS="windows-msys";;
        *bsd*)    INVITILO_OS="bsd-$OSTYPE";;
        # TODO: Linux on Crostini/Chromebook?
        *)        INVITILO_OS="unknown";;
    esac
    readonly INVITILO_OS

    # # shellcheck disable=SC2155 # OK for script to crash if the var is not set.
    INVITILO_ROOT_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
    readonly INVITILO_ROOT_DIR
    readonly INVITILO_THEME_DIR="${INVITILO_ROOT_DIR}/themes"
    readonly INVITILO_THEME_EXT=".theme"

    echo "INVITILO_ROOT_DIR:  $INVITILO_ROOT_DIR"
    echo "INVITILO_THEME_DIR: $INVITILO_THEME_DIR"

    readonly INVITILO_INIT_COMPLETE=true
}
invitilo_init

# Args:
#   $1 Theme name pattern (optional, wildecards ? and * allowed)
# Returns:
#   0 Success
#   1 Error - invalid theme name pattern
invitilo_list() {
    invitilo_ensure_sourced
    invitilo_init

    local pattern="$1"
    # If there is no pattern, use * to match all theme files that don't start
    # with a ".".
    if [[ -z "$pattern" ]]; then
        pattern="*"
    fi
    if [[ "$pattern" == *"/"* ]]; then
        echo "Error: Theme name pattern may not contain '/'."
        return 1
    fi

    # List available themes.
    local theme_count=0
    # Set nullglob to avoid returning the pattern itself if no matches are found.
    local original_nullglob # Declared separately to avoid masking return code.
    original_nullglob=$(shopt -p nullglob)
    shopt -s nullglob

    # Determine the max width of the theme names.
    local theme_name_width=0
    for theme in "${INVITILO_THEME_DIR}"/${pattern}"${INVITILO_THEME_EXT}"; do
        # Shouldn't have to check that theme is in the theme directory.
        theme_name=$(basename "$theme" "${INVITILO_THEME_EXT}")
        if ! invitilo_is_valid_theme "${theme_name}"; then
            continue
        fi
        if (( ${#theme_name} > theme_name_width )); then
            theme_name_width=${#theme_name}
        fi
    done

    # Display the themes.
    for theme in "${INVITILO_THEME_DIR}"/${pattern}"${INVITILO_THEME_EXT}"; do
        # Shouldn't have to check that theme is in the theme directory.
        theme_name=$(basename "$theme" "${INVITILO_THEME_EXT}")
        if ! invitilo_is_valid_theme "${theme_name}"; then
            continue
        fi
        if (( theme_count == 0 )); then
            echo "Available themes (* = active):"
        fi

        unset invitilo_theme_init
        unset invitilo_theme_prompt

        # shellcheck disable=SC1090 # $theme contains an absolute path
        source "$theme"
        invitilo_theme_init
        # Use sample values for display purposes.
        NEWLINE=""
        VENV="${VENV_PREFIX}venv${VENV_SUFFIX}"
        GIT_BRANCH="${GIT_BRANCH_PREFIX}branch${GIT_BRANCH_SUFFIX}"
        GIT_REMOTE_BRANCH="${GIT_REMOTE_BRANCH_PREFIX}remote${GIT_REMOTE_BRANCH_SUFFIX}"
        GIT_AHEAD="${GIT_AHEAD_PREFIX}1${GIT_AHEAD_SUFFIX}"
        GIT_BEHIND="${GIT_BEHIND_PREFIX}2${GIT_BEHIND_SUFFIX}"
        COMMAND_STATUS="$COMMAND_STATUS_SUCCESS"
        invitilo_theme_prompt
        # Convert prompt escape sequences for display.
        local prompt_preview="${PROMPT//\\n/ ${BOLD}${BLACK}↵${RESET} }" # ↲ ↵ ⏎ ⮐ ⮒ ␤
        prompt_preview="${prompt_preview//\\[}"
        prompt_preview="${prompt_preview//\\]}"
        sample_prompt="${sample_prompt//\\e/\\033}"
        # Replace placeholders with actual values for display.
        prompt_preview="${prompt_preview//\\u/user}"
        prompt_preview="${prompt_preview//\\h/host}"
        prompt_preview="${prompt_preview//\\w/\~/directory}"

        if [ "$theme_name" == "$INVITILO_THEME" ]; then
            printf "* %-*s   %b\n" "$theme_name_width" "$theme_name" "$prompt_preview"
        else
            printf "  %-*s   %b\n" "$theme_name_width" "$theme_name" "$prompt_preview"
        fi
        ((theme_count++))
    done
    if (( theme_count == 0 )); then
        echo "No themes found matching theme name pattern: $pattern"
    else
        invitilo_start "$INVITILO_THEME"
    fi
    # Ensure to restore the original value of the nullglob flag later
    # Single quotes to delay evaluation until the trap is executed.
    trap '$original_nullglob' RETURN
}

invitilo_is_valid_theme() {
    local theme_name=$1
    local theme_path="${INVITILO_THEME_DIR}/$1${INVITILO_THEME_EXT}"
    # Validate the theme name.
    if [ -z "$theme_name" ] || [ ! -f "${theme_path}" ]; then
        echo "Error: Theme name is required or theme not found: $theme_name"
        return 1
    fi

    # Validate the theme file: are all required functions declared?
    if ! bash -c "
        source '${theme_path}'; \
        declare -F invitilo_theme_init >/dev/null && \
        declare -F invitilo_theme_prompt >/dev/null
    " 2>/dev/null; then
        echo "Error: Theme file does not properly define invitilo_theme_init() or invitilo_theme_prompt() function."
        return 1
    fi

    return 0
}

# invitilo_start - Start invitilo with the specified theme.
#
# Args:
#   $1 Theme name
#
# Returns:
#   0 if the theme is valid
#   1 if a fallback used
#   2 if no fallback available
invitilo_start() {
    # set -x

    invitilo_ensure_sourced

    # Save the original PS1 prompt if it hasn't been saved already
    if [ -z "${INVITILO_PS1+x}" ]; then
        export INVITILO_PS1="$PS1"
    fi

    local theme_name="$1"
    local return_result=0

    # If not a valid theme, fallback to current theme.
    # If current theme not set, fallback to "default".
    # If "default" not valid, use orginal prompt.
    if ! invitilo_is_valid_theme "$theme_name"; then
        if [ -n "$INVITILO_THEME" ]; then
            echo "Prompt theme not found: ${theme_name}"
            echo "Using currently active prompt theme: ${INVITILO_THEME}"
            return 1
        fi
        theme_name="default"
        return_result=1
        if ! invitilo_is_valid_theme "$theme_name"; then
            echo "Default prompt theme not found; using original prompt."
            stop_invitilo
            return 2
        fi
    fi

    export INVITILO_THEME="${theme_name}"

    # Unload the previous theme if it exists.
    unset invitilo_theme_init
    unset invitilo_theme_prompt

    # Load the new theme.
    # shellcheck disable=SC1090 # ShellCheck can't detect the theme file.
    source "${INVITILO_THEME_DIR}/${theme_name}${INVITILO_THEME_EXT}"

    PROMPT_COMMAND=invitilo

    echo "Invitilo: Prompt theme ${theme_name} loaded."
    return $return_result
}

invitilo_stop() {
    invitilo_ensure_sourced
    unset PROMPT_COMMAND
    PS1="$INVITILO_PS1"
    unset INVITILO_PS1
    unset INVITILO_THEME
}


invitilo_newline() {
    # Detect whether at the leftmost column to allow starting the prompt at the beginning of
    # the next line. Useful when the last executed command leaves the cursor in the middle of
    # the line (e.g., after running base64 -w0 <filename>).
    # VSCode's interprocess communication to remote shells (e.g., WSL) doesn't handle \e[6n
    # well, so skip detection if running in that environment.
    NEWLINE=""
    # if ! env | grep -q -m 1 "VSCODE_"; then
    if [ -z "$VSCODE_IPC_HOOK_CLI" ]; then
        # \[ and \] aren't needed here, and if used they will be displayed.
        IFS=';' read -rsdR -p $'\e[s\e[6n' _ COL
        echo -ne "\e[u"
        if (( COL > 1 )); then
            # shellcheck disable=SC2034 # Used in themes.
            NEWLINE="${BOLD}${RED}␤${RESET}\n"
        fi
    fi
}

invitilo_python_venv() {
    # Get the current Python virtual environment name.
    VENV=""
    if [ -n "$VIRTUAL_ENV_PROMPT" ]; then
        # shellcheck disable=SC2034 # Used in themes.
        VENV="${VENV_PREFIX}${VIRTUAL_ENV_PROMPT}${VENV_SUFFIX}"
    fi
}

# shellcheck disable=SC2034 # Variables used in themes.
invitilo_git_branch() {
    # Get the current git local and remote branch names.
    GIT_REMOTE_BRANCH=""
    GIT_AHEAD=""
    GIT_BEHIND=""
    GIT_BRANCH=$(git branch 2>/dev/null | grep '\*' | sed 's/* //')
    if [[ -n "$GIT_BRANCH" ]]; then
        GIT_BRANCH="${GIT_BRANCH_PREFIX}${GIT_BRANCH}${GIT_BRANCH_SUFFIX}"
        # Check if the current branch is tracking a remote branch
        GIT_REMOTE_BRANCH=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null)
        if [[ -n "$GIT_REMOTE_BRANCH" ]]; then
            GIT_REMOTE_BRANCH="${GIT_REMOTE_BRANCH_PREFIX}${GIT_REMOTE_BRANCH}${GIT_REMOTE_BRANCH_SUFFIX}"
        fi
        # Get ahead/behind counts.
        read -r GIT_AHEAD GIT_BEHIND <<< "$(git rev-list --left-right --count HEAD...'@{u}' 2>/dev/null)"
        GIT_AHEAD="${GIT_AHEAD_PREFIX}${GIT_AHEAD}${GIT_AHEAD_SUFFIX}"
        GIT_BEHIND="${GIT_BEHIND_PREFIX}${GIT_BEHIND}${GIT_BEHIND_SUFFIX}"
    fi
}

invitilo_status() {
    # Get the status of the last command.
    if (( COMMAND_STATUS == 0 )); then
        COMMAND_STATUS="${COMMAND_STATUS_SUCCESS}"
    else
        COMMAND_STATUS="${COMMAND_STATUS_ERROR}"
    fi
}


invitilo() {
    # Need to get the status of the last command before calling any functions.
    # initilo_status will update the value for use in the prompt.
    COMMAND_STATUS=$?

    # Ideally, these functions would ever need to be called once. But we call
    # them here to ensure the values of the variables are sure to be unaffected
    # by other processes.
    # invitilo_init_colors
    invitilo_theme_init

    # The values of the variables set by these functions may vary by the state
    # of the system (e.g., where the cursor is on the line, if a Python virtual
    # environment is active, etc.).
    invitilo_newline
    invitilo_python_venv
    invitilo_git_branch
    invitilo_status

    # Call the make_prompt function defined in the theme file
    # shellcheck disable=SC2119
    invitilo_theme_prompt
    PS1="${PROMPT}"
}

echo "---> $1 $2 $3 <---"

case "$1" in
    --help|-h)
        cat <<EOF
USAGE
    . invitilo [option] [theme]
    source invitilo [option] [theme]

OPTIONS
    -h, --help           Show this help message.
    --list ["pattern"]   List available themes. Wilcards * and ? allowed in the
                         pattern, and if used enclose in double quotes.
    --stop               Stop Invitilo and restore the original prompt.
    --version            Show the version of Invitilo.
    [theme]              Start Invitilo with the specified theme.
EOF
        ;;
    --list)
        invitilo_list "$2"
        ;;
    --stop)
        invitilo_stop
        ;;
    --version)
        cat VERSION
        # echo "----"
        # VERSION=$(head -n 1 VERSION | (IFS=' ' read -r _ ver ; echo "$ver"))
        # echo "VERSION=$VERSION"
        # if [[ "$VERSION" == *"-"* ]]; then
        #     PRERELEASE=true
        # else
        #     PRERELEASE=false
        # fi
        # echo "PRERELEASE=$PRERELEASE"
        ;;
    *)
        if [[ "$1" == -* ]]; then
            echo "Error: Inavlid option. Use -h or --help for usage information."
            exit 1
        fi
        invitilo_start "$1"
        ;;
esac

if [ "$?" -ne 0 ]; then
    echo "error"
fi
