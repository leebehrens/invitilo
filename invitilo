#!/usr/bin/env bash

# Invitilo: An enhanced command prompt
# Run using . or source:
#   . invitilo [options] [theme]
#   source invitilo [options] [theme]

# shellcheck disable=SC2034
invitilo_init_colors() {
    # Effects - Wrapped in \[\] to prevent bash from counting them as displayed characters.
    RESET='\[\e[0m\]'
    BOLD='\[\e[1m\]'
    DIM='\[\e[2m\]'
    NORMAL='\[\e[22m\]'
    ITALIC='\[\e[3m\]'
    NOITALIC='\[\e[23m\]'
    UNDERLINE='\[\e[4m\]'
    NOUNDERLINE='\[\e[24m\]'
    BLINK='\[\e[5m\]'
    NOBLINK='\[\e[25m\]'
    REVERSE='\[\e[7m\]'
    NOREVERSE='\[\e[27m\]'
    STRIKE='\[\e[9m\]'
    NOSTRIKE='\[\e[29m\]'

    # Forground colors - Wrapped in \[\] to prevent bash from counting them as displayed characters.
    BLACK='\[\e[30m\]'
    RED='\[\e[31m\]'
    GREEN='\[\e[32m\]'
    YELLOW='\[\e[33m\]'
    BLUE='\[\e[34m\]'
    MAGENTA='\[\e[35m\]'
    CYAN='\[\e[36m\]'
    WHITE='\[\e[37m\]'

    # Background colors - Wrapped in \[\] to prevent bash from counting them as displayed characters.
    BLACKBG='\[\e[40m\]'
    REDBG='\[\e[41m\]'
    GREENBG='\[\e[42m\]'
    YELLOWBG='\[\e[43m\]'
    BLUEBG='\[\e[44m\]'
    MAGENTABG='\[\e[45m\]'
    CYANBG='\[\e[46m\]'
    WHITEBG='\[\e[47m\]'
}

case "$OSTYPE" in
    linux*)
        INVITILO_OS="linux"
        if env | grep -q "WSL"; then
            # Running in WSL
            INVITILO_OS="linux-wsl"
        fi
        ;;
    darwin*)  INVITILO_OS="macos";;
    cygwin*)  INVITILO_OS="cygwin";;
    msys*)    INVITILO_OS="windows";;
    *bsd*)    INVITILO_OS="bsd-$OSTYPE";;
    *)        INVITILO_OS="unknown";;
esac

INVITILO_ROOT_DIR="$(dirname "${BASH_SOURCE[0]}")"
INVITILO_THEME_DIR="${INVITILO_ROOT_DIR}/themes"
INVITILO_THEME_EXT=".i-theme"

invitilo_ensure_sourced() {
    # Check if the script is being sourced
    if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
        echo "Error: This script must be sourced. Use 'source invitilo' or '. invitilo'."
        exit 1
    fi
}

invitilo_list() {
    # List available themes without the .pi-theme extension
    echo "Available themes (* = active):"
    for theme in "${INVITILO_THEME_DIR}"/*"${INVITILO_THEME_EXT}"; do
        theme_name=$(basename "$theme" ${INVITILO_THEME_EXT})
        if [ "$theme_name" == "$INVITILO_THEME" ]; then
            echo "* $theme_name"
        else
            echo "  $theme_name"
        fi
    done
}


invitilo_start() {
    invitilo_ensure_sourced

    # Save the original PS1 prompt if it hasn't been saved already
    if [ -z "${INVITILO_PS1+x}" ]; then
        export INVITILO_PS1="$PS1"
    fi
    # echo -E "INVITILO_PS1: $INVITILO_PS1"

    # Verify the desired theme exists, falling back to the default theme. If the default
    # can't befound either, then revert to the original prompt.
    THEME_NAME="$1"
    if [ -z "$THEME_NAME" ]; then
        THEME_NAME="default"
    fi
    if [ ! -f "${INVITILO_THEME_DIR}/${THEME_NAME}${INVITILO_THEME_EXT}" ]; then
        echo "Prompt theme not found: ${THEME_NAME}"
        THEME_NAME="default"
        if [ ! -f "${INVITILO_THEME_DIR}/${THEME_NAME}${INVITILO_THEME_EXT}" ]; then
            echo "Default prompt theme not found; using orignal prompt."
            stop_invitilo
            exit 1
        fi
    fi

    export INVITILO_THEME="${THEME_NAME}"

    # Unload the previous theme if it exists.
    unset invitilo_theme_init
    unset invitilo_theme_prompt

    # Load the new theme.
    declare -A AFFIX
    # shellcheck disable=SC1090
    source "${INVITILO_THEME_DIR}/${THEME_NAME}${INVITILO_THEME_EXT}"

    AFFIX[OTHER]="ABC"

    # # display all the elements of the associative array AFFIX
    # for key in "${!AFFIX[@]}"; do
    #     echo "$key: ${AFFIX[$key]}"
    # done

    invitilo_theme_prompt
    # echo -E "PROMPT: $PROMPT"

    PROMPT_COMMAND=invitilo

    echo "Invitilo: Prompt theme ${THEME_NAME} loaded."
}

invitilo_stop() {
    invitilo_ensure_sourced
    unset PROMPT_COMMAND
    PS1="$INVITILO_PS1"
    unset INVITILO_PS1
    unset INVITILO_THEME
}


invitilo_newline() {
    # Detect whether at the leftmost column to allow starting the prompt at the beginning of
    # the next line. Useful when the last executed command leaves the cursor in the middle of
    # the line (e.g., after running base64 -w0 <filename>).
    # VSCode's interprocess communication to remote shells (e.g., WSL) doesn't handle \e[6n
    # well, so skip detection if running in that environment.
    NEWLINE=""
    # if ! env | grep -q -m 1 "VSCODE_"; then
    if [ -z "$VSCODE_IPC_HOOK_CLI" ]; then
        # \[ and \] aren't needed here, and if used they will be displayed.
        IFS=';' read -rsdR -p $'\e[s\e[6n' _ COL
        echo -ne "\e[u"
        if (( COL > 1 )); then
            NEWLINE="${BOLD}${RED}␤${RESET}\n"
        fi
    fi
}

invitilo_python_venv() {
    # Get the current Python virtual environment name.
    VENV=""
    if [ -n "$VIRTUAL_ENV_PROMPT" ]; then
        VENV="${VENV_PREFIX}${VIRTUAL_ENV_PROMPT}${VENV_SUFFIX}"
    fi
}

invitilo_git_branch() {
    # Get the current git local and remote branch names.
    #GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
    GIT_REMOTE_BRANCH=""
    GIT_BRANCH=$(git branch 2>/dev/null | grep '\*' | sed 's/* //')
    if [[ -n "$GIT_BRANCH" ]]; then
        GIT_BRANCH="${GIT_BRANCH_PREFIX}${GIT_BRANCH}${GIT_BRANCH_SUFFIX}"
    fi
}

invitilo_status() {
    # Get the status of the last command.
    if (( STATUS == 0 )); then
        STATUS="${SUCCESS_STATUS}"
    else
        STATUS="${ERROR_STATUS}"
    fi
}


invitilo() {
    # Need to get the status of the last command before calling any functions.
    # initilo_status will update the value for use in the prompt.
    STATUS=$?

    # Ideally, these functions would ever need to be called once. But we call
    # them here to ensure the values of the variables are sure to be unaffected
    # by other processes.
    invitilo_init_colors
    invitilo_theme_init

    # The values of the variables set by these functions may vary by the state
    # of the system (e.g., where the cursor is on the line, if a Python virtual
    # environment is active, etc.).
    invitilo_newline
    invitilo_python_venv
    invitilo_git_branch
    invitilo_status

    # Call the make_prompt function defined in the theme file
    # shellcheck disable=SC2119
    invitilo_theme_prompt
    PS1="${PROMPT}"
}

case "$1" in
    --help|-h)
        cat <<EOF
NAME
    invitilo - An enhanced command prompt

SYNOPSIS
    . invitilo [option] [theme]
    source invitilo [option] [theme]

DESCRIPTION
    A customizable command prompt with theme support.

OPTIONS
    -h, --help   Show this help message.
    --list       List available themes.
    --stop       Stop invitilo and restore the original prompt.
    [theme]      Start invitilo with the specified theme. The default theme
                 is used if not specified.
EOF
        ;;
    --list)
        invitilo_list
        ;;
    --stop)
        invitilo_stop
        ;;
    --version)
        echo -n "Invitilo "; cat "${INVITILO_ROOT_DIR}/VERSION"
        ;;
    *)
        if [[ "$1" == -* ]]; then
            echo "Error: Inavlid option. Use -h or --help for usage information."
            exit 1
        fi
        invitilo_start "$1"
        ;;
esac
