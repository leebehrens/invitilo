#!/usr/bin/env bash

# Invitilo: An command prompt
# Invitilo installer script


RELEASE_TAG="$1"

if [[ "$RELEASE_TAG" == "-h" || "$RELEASE_TAG" == "--help" ]]; then
    echo "Invitilo installer"
    echo ""
    echo "Usage: $0 [release_tag]"
    echo ""
    echo "If no release tag is specified, or if 'latest' is specified, the latest release will be downloaded."
    echo "If 'prerelease' is specified, the latest pre-release will be downloaded."
    echo "If a specific release tag is specified (e.g., 'v1.0.0'), that release will be downloaded."
    exit 0
fi

if [[ "$RELEASE_TAG" =~ ^- ]]; then
    echo "Error: invalid option/release tag. Use $0 -h for help."
    exit 1
fi

read -r -p "This is preliminary code. Continue? [y/N]: " response
response=${response,,} # Convert to lowercase
if [[ "$response" != "y" && "$response" != "yes" ]]; then
    echo "Exiting script."
    exit 0
fi

# Check if jq is installed
if ! command -v jq &> /dev/null; then
    echo "Error: 'jq' is not installed. Please install it to proceed."
    exit 1
fi

INVITILO_INSTALL_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
INVITILO_INSTALL_FILE="$(basename "${BASH_SOURCE[0]}")"

# Determine the user's config dir for Invitilo. Create it if it doesn't exist.
INVITILO_CONFIG_DIR="$HOME/.config/invitilo"
if [ -d "$XDG_CONFIG_HOME" ]; then
    INVITILO_CONFIG_DIR="$XDG_CONFIG_HOME/invitilo"
fi
mkdir -p "$INVITILO_CONFIG_DIR"
# echo "$INVITILO_CONFIG_DIR"
if [ ! -d "$INVITILO_CONFIG_DIR" ]; then
    echo "Failed to create directory: $INVITILO_CONFIG_DIR"
    exit 1
fi

# Determine the user's bin and bin/download dir for Invitilo. Create them if they don't exist.
USER_BIN_DIR="$HOME/.local/bin"
if [ -d "$XDG_BIN_HOME" ]; then
    USER_BIN_DIR="$XDG_BIN_HOME"
fi
INVITILO_BIN_DIR="$USER_BIN_DIR/invitilo.d"
INVITILO_BIN_DOWNLOAD_DIR="$INVITILO_BIN_DIR/download"
INVITILO_BIN_BASHRC_DIR="$INVITILO_BIN_DIR/bashrc"
mkdir -p "$INVITILO_BIN_DOWNLOAD_DIR"
if [ ! -d "$INVITILO_BIN_DOWNLOAD_DIR" ]; then
    echo "Failed to create directory: $INVITILO_BIN_DOWNLOAD_DIR"
    exit 1
fi
mkdir -p "$INVITILO_BIN_BASHRC_DIR"
if [ ! -d "$INVITILO_BIN_BASHRC_DIR" ]; then
    echo "Failed to create directory: $INVITILO_BIN_BASHRC_DIR"
    exit 1
fi

# Check if this script is already in the bin directory.
if [ "$INVITILO_INSTALL_DIR" != "$INVITILO_BIN_DIR" ]; then
    cp "$INVITILO_INSTALL_DIR/$INVITILO_INSTALL_FILE" "$INVITILO_BIN_DIR/"
    chmod u+x "$INVITILO_BIN_DIR/$INVITILO_INSTALL_FILE"
fi


GITHUB_REPO="leebehrens/invitilo"
if [ -z "$RELEASE_TAG" ]; then
    # Fetch the latest release version
    LATEST_RELEASE=$(curl -s "https://api.github.com/repos/$GITHUB_REPO/releases/latest" | jq -r '.tag_name')
    if [ -z "$LATEST_RELEASE" ]; then
        echo "Failed to fetch the latest release."
        exit 1
    fi
    echo "Latest release: $LATEST_RELEASE"
elif [ "$RELEASE_TAG" == "prerelease" ]; then
    # Fetch the latest pre-release version
    LATEST_RELEASE=$(curl -s "https://api.github.com/repos/$GITHUB_REPO/releases" | jq -r '.[] | select(.prerelease) | .tag_name' | head -n 1)
    if [ -z "$LATEST_RELEASE" ]; then
        echo "Failed to fetch the latest pre-release."
        exit 1
    fi
    echo "Latest pre-release: $LATEST_RELEASE"
else
    # Use the specified release tag
    LATEST_RELEASE=$(curl -s "https://api.github.com/repos/$GITHUB_REPO/releases/tags/$RELEASE_TAG" | jq -r '.tag_name')
    if [ -z "$LATEST_RELEASE" ]; then
        echo "Release tag '$RELEASE_TAG' not found."
        exit 1
    fi
    echo "Specified release: $LATEST_RELEASE"
fi

# Download the release asset
printf "Downloading release file %s... " "$LATEST_RELEASE"
ASSET_NAME="$LATEST_RELEASE.tar.gz"
ASSET_URL="https://github.com/leebehrens/invitilo/archive/refs/tags/$ASSET_NAME"
curl -sL "$ASSET_URL" -o "$INVITILO_BIN_DOWNLOAD_DIR/$ASSET_NAME"
if [ $? -ne 0 ]; then
    printf "Failed\n"
    exit 1
fi
printf "Done\n"

# Extract the release asset
printf "Extracting release... "
tar -xzf "$INVITILO_BIN_DOWNLOAD_DIR/$ASSET_NAME" -C "$INVITILO_BIN_DIR"
if [ $? -ne 0 ]; then
    printf "Failed\n"
    exit 1
fi
printf "Done\n"

# Create invitilo command.
printf "Creating invitilo command... "
cat <<EOF > "$USER_BIN_DIR/invitilo"
#!/usr/bin/env bash

# Invitilo: A command prompt
# Launcher script for Invitilo

# This script is automatically generated and should not be modified.

# For use via the command-line.
invitilo() {
    source $INVITILO_BIN_DIR/invitilo-${LATEST_RELEASE#v}/invitilo "\$@"
}

# For startup via .bashrc.
invitilo "\$@"
EOF
chmod u+x "$USER_BIN_DIR/invitilo"
printf "Done\n"



# Copy .bashrc to bashrc backup directory.
printf "Backing up .bashrc... "
if [ -f "$HOME/.bashrc" ]; then
    # Find the highest numbered backup file. There is a more elegant way to do
    # this using external commands, but this way sticks with bash builtins.
    BACKUP_INDEX=0
    for file in "$INVITILO_BIN_BASHRC_DIR"/bashrc.*; do
        # Extract the numeric part after 'bashrc.' using parameter expansion
        if [[ $file =~ bashrc\.([0-9]+)$ ]]; then
            num=${BASH_REMATCH[1]}
            # Update BACKUP_INDEX to the highest number found
            (( num > BACKUP_INDEX )) && BACKUP_INDEX=$num
        fi
    done
    # Test if .bashrc is the same as the last backup file.
    LAST_BACKUP_FILE="$INVITILO_BIN_BASHRC_DIR/bashrc.$BACKUP_INDEX"
    if [ ! -f "$LAST_BACKUP_FILE" ] || ! cmp -s "$HOME/.bashrc" "$LAST_BACKUP_FILE"; then
        BACKUP_INDEX=$((BACKUP_INDEX + 1))
        cp "$HOME/.bashrc" "$INVITILO_BIN_BASHRC_DIR/bashrc.$BACKUP_INDEX"
        if [ $? -ne 0 ]; then
            printf "Failed\n"
            exit 1
        fi
        printf "Done\n"
    else
        printf "Skipped (no changes)\n"
    fi
fi

# Append the invitilo source line to .bashrc if it doesn't already exist
if ! grep -qE "^\s*source\s+$USER_BIN_DIR/invitilo(\s+.*)?$" "$HOME/.bashrc"; then
    printf "Adding invitilo to .bashrc... "
    cat <<EOF >> "$HOME/.bashrc"

# Invitilo: A command prompt
source $USER_BIN_DIR/invitilo
EOF
    if [ $? -ne 0 ]; then
        printf "Failed\n"
        exit 1
    fi
    printf "Done\n"
else
    printf "Skipped (already exists)\n"
fi
